{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      url,\n      headers\n    } = _ref;\n    this._url = url;\n    this._headers = headers;\n  }\n\n  //Проверка\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`У нас ошибка ${res.status}`);\n  }\n\n  //Данные пользователя\n  getUserInfo() {\n    return fetch(this._url + '/users/me', {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  //Обновление данных пользователя\n  updateUserInfo(userData) {\n    return fetch(this._url + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData.name,\n        about: userData.occupation\n      })\n    }).then(this._checkResponse);\n  }\n\n  //Обновление аватара пользователя\n  updateUserAvatar(_ref2) {\n    let {\n      avatar\n    } = _ref2;\n    return fetch(this._url + '/users/me/avatar', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(this._checkResponse);\n  }\n\n  //Начальные карточки\n  getInitialCards() {\n    return fetch(this._url + '/cards', {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  //Добавление карточки\n  addCard(cardData) {\n    return fetch(this._url + '/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: cardData.name,\n        link: cardData.link\n      })\n    }).then(this._checkResponse);\n  }\n\n  //Удаление карточки\n  deleteCard(cardId) {\n    return fetch(this._url + `/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  //Like карточки\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {\n      return fetch(this._url + `/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: this._headers\n      }).then(this._checkResponse);\n    } else {\n      return fetch(this._url + `/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(this._checkResponse);\n    }\n  }\n}\nconst api = new Api({\n  url: 'https://rerasmesto.students.nomoredomains.monster',\n  headers: {\n    authorization: `Bearer ${localStorage.getItem('jwt')}`,\n    'content-type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","url","headers","_url","_headers","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","then","updateUserInfo","userData","body","JSON","stringify","name","about","occupation","updateUserAvatar","avatar","getInitialCards","addCard","cardData","link","deleteCard","cardId","changeLikeCardStatus","isLiked","api","authorization","localStorage","getItem"],"sources":["C:/Users/puchkov/documents/github/react-mesto-api-full-gha/frontend/src/utils/Api.js"],"sourcesContent":["class Api {\r\n  constructor({url, headers}) {\r\n    this._url = url;\r\n    this._headers = headers;\r\n  }\r\n\r\n  //Проверка\r\n  _checkResponse(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`У нас ошибка ${res.status}`);\r\n  }\r\n\r\n  //Данные пользователя\r\n  getUserInfo() {\r\n    return fetch(this._url + '/users/me', {\r\n      method: 'GET',\r\n      headers: this._headers\r\n    })\r\n    .then(this._checkResponse);\r\n  }\r\n\r\n  //Обновление данных пользователя\r\n  updateUserInfo(userData) {\r\n    return fetch(this._url + '/users/me', {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: userData.name,\r\n        about: userData.occupation\r\n      })\r\n    })\r\n    .then(this._checkResponse);\r\n  }\r\n\r\n  //Обновление аватара пользователя\r\n  updateUserAvatar({avatar}) {\r\n    return fetch(this._url + '/users/me/avatar', {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        avatar,\r\n      })\r\n    })\r\n    .then(this._checkResponse);\r\n  }\r\n\r\n  //Начальные карточки\r\n  getInitialCards(){\r\n    return fetch(this._url + '/cards', {\r\n      method: 'GET',\r\n      headers: this._headers\r\n    })\r\n    .then(this._checkResponse);\r\n  }\r\n\r\n  //Добавление карточки\r\n  addCard(cardData) {\r\n    return fetch(this._url + '/cards', {\r\n      method: 'POST',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: cardData.name,\r\n        link: cardData.link\r\n      })\r\n    })\r\n    .then(this._checkResponse);\r\n  }\r\n\r\n  //Удаление карточки\r\n  deleteCard(cardId) {\r\n    return fetch(this._url + `/cards/${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: this._headers,\r\n    })\r\n    .then(this._checkResponse);\r\n  }\r\n\r\n  //Like карточки\r\n  changeLikeCardStatus(cardId, isLiked) {\r\n  if(isLiked) {\r\n    return fetch(this._url + `/cards/${cardId}/likes`, {\r\n      method: 'PUT',\r\n      headers: this._headers,\r\n    })\r\n    .then(this._checkResponse);\r\n    } else {\r\n    return fetch(this._url + `/cards/${cardId}/likes`, {\r\n      method: 'DELETE',\r\n      headers: this._headers,\r\n    })\r\n    .then(this._checkResponse);\r\n    }\r\n  }\r\n}\r\n\r\nconst api = new Api ({\r\n  url: 'https://rerasmesto.students.nomoredomains.monster',\r\n  headers: {\r\n    authorization: `Bearer ${localStorage.getItem('jwt')}`,\r\n    'content-type': 'application/json'\r\n  },\r\n});\r\n\r\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}